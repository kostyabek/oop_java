package com.mycompany.lab5;

import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import src.DAOs.DAOMonthlyIncome;
import src.DateParticipant;
import src.DateTimeUtilities;
import src.Participant;

public class FormIncomeLookup extends javax.swing.JPanel {

    public FormIncomeLookup() {
        initComponents();
        connectToTheDatabase();

        DocumentListener dateStartInputListener = new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                checkDateStartInput();
            }

            public void removeUpdate(DocumentEvent e) {
                checkDateStartInput();
            }

            public void changedUpdate(DocumentEvent e) {
                //Plain text components do not fire these events
            }
        };

        DocumentListener dateEndInputListener = new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                checkDateEndInput();
            }

            public void removeUpdate(DocumentEvent e) {
                checkDateEndInput();
            }

            public void changedUpdate(DocumentEvent e) {
                //Plain text components do not fire these events
            }
        };

        fieldFrom.getDocument().addDocumentListener(dateStartInputListener);
        fieldTo.getDocument().addDocumentListener(dateEndInputListener);
        
        Comparator<Calendar> comparator = new Comparator() {
            @Override
            public int compare(Object o1, Object o2) {
                Calendar c1 = DateTimeUtilities.convertStringDateToCalendar((String) o1);
                Calendar c2 = DateTimeUtilities.convertStringDateToCalendar((String) o2);
                return c1.compareTo(c2);
            }
        };
        TableRowSorter<TableModel> tableRowSorter = new TableRowSorter<>(tableIncomeLookup.getModel());
        tableRowSorter.setComparator(0, comparator);
        tableIncomeLookup.setRowSorter(tableRowSorter);
    }

    private void connectToTheDatabase() {
        try {
            daoMonthlyIncome.setConnection("jdbc:sqlite:E:\\NetBeans Java Projects\\Lab5\\database\\politicalPower.db");
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this,
                    "Error while connecting to the database!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private boolean checkDateStartInput() {
        if (!fieldFrom.getText().matches("[0-9]{1,2}[.][0-9]{1,2}[.][0-9]{4}")) {
            fieldFrom.setBackground(Color.red);
            return false;
        } else {
            fieldFrom.setBackground(Color.white);
            return true;
        }
    }

    private boolean checkDateEndInput() {
        if (!fieldTo.getText().matches("[0-9]{1,2}[.][0-9]{1,2}[.][0-9]{4}")) {
            fieldTo.setBackground(Color.red);
            return false;
        } else {
            fieldTo.setBackground(Color.white);
            return true;
        }
    }

//    private void createDatePickers() {
//        GridLayout gridLayout = new GridLayout(1, 2);
//
//        JPanel panel = new JPanel();
//        panel.setLayout(gridLayout);
//
//        DatePickerSettings dateSettingsStart = new DatePickerSettings();
//        DatePickerSettings dateSettingsEnd = new DatePickerSettings();
//        dateSettingsStart.setFirstDayOfWeek(DayOfWeek.MONDAY);
//        dateSettingsEnd.setFirstDayOfWeek(DayOfWeek.MONDAY);
//        datePickerStart = new DatePicker(dateSettingsStart);
//        datePickerEnd = new DatePicker(dateSettingsEnd);
//
//        panel.add(datePickerStart);
//        panel.add(datePickerEnd);
//        
//        panel.setMaximumSize(new Dimension(10, 20));
//        
//        GroupLayout layout = (GroupLayout) this.getLayout();
//
//        layout.setHorizontalGroup(
//                layout.createSequentialGroup().addGap(150)
//                .addComponent(panel)
//        );
//        layout.setVerticalGroup(
//                layout.createSequentialGroup()
//                .addComponent(panel)
//        );
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableIncomeLookup = new javax.swing.JTable();
        fieldFrom = new javax.swing.JTextField();
        fieldTo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnFindIncome = new javax.swing.JButton();

        setBackground(new java.awt.Color(102, 204, 255));

        tableIncomeLookup.setBackground(java.awt.Color.cyan);
        tableIncomeLookup.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableIncomeLookup.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "date", "id", "firstName", "lastName", "patronymic", "region", "income"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableIncomeLookup.setGridColor(new java.awt.Color(51, 153, 255));
        jScrollPane1.setViewportView(tableIncomeLookup);

        fieldFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        fieldTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("From");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("To");

        btnFindIncome.setBackground(java.awt.Color.cyan);
        btnFindIncome.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnFindIncome.setText("Find");
        btnFindIncome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnFindIncomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnFindIncomeMouseExited(evt);
            }
        });
        btnFindIncome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindIncomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldTo, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 139, Short.MAX_VALUE)
                        .addComponent(btnFindIncome, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(btnFindIncome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindIncomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindIncomeActionPerformed
        if (!checkDateStartInput() || !checkDateEndInput()) {
            JOptionPane.showMessageDialog(this,
                    "Check input!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        clearTable();

        if (verifyTimePeriodFormat(fieldFrom.getText(), fieldTo.getText()) && checkChronology()) {
            List<DateParticipant> records = new ArrayList<>();
            List<DateParticipant> filteredRecords = new ArrayList<>();
            try {
                records.addAll(daoMonthlyIncome.getAll());
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(this,
                        "Error while fetching from the database!",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
            while (dateEnd.compareTo(dateStart) >= 0) {
                for (DateParticipant record : records) {
                    Calendar calendar = record.getDate();
                    if (dateEnd.get(Calendar.DAY_OF_MONTH) == calendar.get(Calendar.DAY_OF_MONTH)
                            && dateEnd.get(Calendar.MONTH) == calendar.get(Calendar.MONTH)
                            && dateEnd.get(Calendar.YEAR) == calendar.get(Calendar.YEAR)) {
                        filteredRecords.add(record);
                    }
                }

                dateEnd.add(Calendar.DAY_OF_MONTH, - 1);
            }
            addDataToTable(filteredRecords);
        }
    }//GEN-LAST:event_btnFindIncomeActionPerformed

    private void btnFindIncomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFindIncomeMouseEntered
        evt.getComponent().setBackground(Color.YELLOW);
    }//GEN-LAST:event_btnFindIncomeMouseEntered

    private void btnFindIncomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFindIncomeMouseExited
        evt.getComponent().setBackground(Color.CYAN);
    }//GEN-LAST:event_btnFindIncomeMouseExited

    private boolean verifyTimePeriodFormat(String start, String end) {
        try {
            dateStart = DateTimeUtilities.convertStringDateToCalendar(start);
            dateEnd = DateTimeUtilities.convertStringDateToCalendar(end);
        } catch (IllegalArgumentException ex) {
            System.out.println(ex.getMessage());
            return false;
        }
        return true;
    }

    private boolean checkChronology() {
        return dateStart.compareTo(dateEnd) < 0;
    }

    private void clearTable() {
        DefaultTableModel tableModel = (DefaultTableModel) tableIncomeLookup.getModel();

        int rowsQty = tableModel.getRowCount();
        for (int i = rowsQty - 1; i >= 0; i--) {
            tableModel.removeRow(i);
        }
    }

    private void addDataToTable(List<DateParticipant> records) {
        if (!records.isEmpty()) {
            DefaultTableModel tableModel = (DefaultTableModel) tableIncomeLookup.getModel();
            int columnsQty = tableIncomeLookup.getColumnCount();
            String[] stringData = new String[columnsQty - 1];

            for (int i = 0; i < records.size(); i++) {
                Participant participant = records.get(i).getParticipant();
                stringData[0] = records.get(i).getDateString();
                stringData[1] = participant.getId();
                stringData[2] = participant.firstName;
                stringData[3] = participant.lastName;
                stringData[4] = participant.patronymic;
                stringData[5] = participant.region.name();

                tableModel.addRow(stringData);
                tableModel.setValueAt(participant.netWorth, i, columnsQty - 1);
            }
        }
    }

    private Calendar dateStart;
    private Calendar dateEnd;
    private DAOMonthlyIncome daoMonthlyIncome = new DAOMonthlyIncome();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFindIncome;
    private javax.swing.JTextField fieldFrom;
    private javax.swing.JTextField fieldTo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableIncomeLookup;
    // End of variables declaration//GEN-END:variables
}
