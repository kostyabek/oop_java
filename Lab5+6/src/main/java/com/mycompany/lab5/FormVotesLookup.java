/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.lab5;

import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import src.DAOs.DAOElections;
import src.DAOs.DAOParticipants;
import src.DateTimeUtilities;
import src.Participant;
import src.ParticipantVote;

/**
 *
 * @author kosty
 */
public class FormVotesLookup extends javax.swing.JPanel {

    /**
     * Creates new form FormVoteLookup
     */
    public FormVotesLookup() {
        initComponents();
        
                connectToTheDatabase();

        DocumentListener dateInputListener = new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                checkDateInput();
            }

            public void removeUpdate(DocumentEvent e) {
                checkDateInput();
            }

            public void changedUpdate(DocumentEvent e) {
                //Plain text components do not fire these events
            }
        };

        DocumentListener idInputListener = new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                checkIdInput();
            }

            public void removeUpdate(DocumentEvent e) {
                checkIdInput();
            }

            public void changedUpdate(DocumentEvent e) {
                //Plain text components do not fire these events
            }
        };

        fieldDate.getDocument().addDocumentListener(dateInputListener);
        fieldId.getDocument().addDocumentListener(idInputListener);
    }
    
    private void connectToTheDatabase() {
        try {
            daoParticipants.setConnection("jdbc:sqlite:E:\\NetBeans Java Projects\\Lab5\\database\\politicalPower.db");
            daoElections.setConnection("jdbc:sqlite:E:\\NetBeans Java Projects\\Lab5\\database\\politicalPower.db");
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this,
                    "Error while connecting to the database!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    private boolean checkDateInput() {
        if (!fieldDate.getText().matches("[0-9]{1,2}[.][0-9]{1,2}[.][0-9]{4}")) {
            fieldDate.setBackground(Color.red);
            return false;
        } else {
            fieldDate.setBackground(Color.white);
            return true;
        }
    }

    private boolean checkIdInput() {
        if (!fieldId.getText().matches("[a-zA-Z0-9]{8}")) {
            fieldId.setBackground(Color.red);
            return false;
        } else {
            fieldId.setBackground(Color.white);
            return true;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel6 = new javax.swing.JLabel();
        fieldId = new javax.swing.JTextField();
        fieldDate = new javax.swing.JTextField();
        criteriaVote = new javax.swing.JComboBox<>();
        btnFind = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        votesTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(102, 204, 255));

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Find votes");

        fieldId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        fieldDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        criteriaVote.setBackground(java.awt.Color.cyan);
        criteriaVote.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        criteriaVote.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "votedFor", "votesFrom" }));

        btnFind.setBackground(java.awt.Color.cyan);
        btnFind.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnFind.setText("Find");
        btnFind.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnFindMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnFindMouseExited(evt);
            }
        });
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Participant id");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Date");

        votesTable.setBackground(java.awt.Color.cyan);
        votesTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        votesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "participantId", "firstName", "lastName", "patronymic", "region"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(votesTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(105, 105, 105))
                                .addComponent(fieldId, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(criteriaVote, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                                .addComponent(btnFind))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fieldDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(criteriaVote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFind)
                            .addComponent(fieldId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1)
                        .addComponent(jLabel1))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        clearTable();
        if (!checkFields()) {
            return;
        }

        String participantId = fieldId.getText();
        String dateString = createDateString();
        String criteria = (String) criteriaVote.getSelectedItem();
        
        List<ParticipantVote> records = fetchDatabaseRecords(dateString);
        if (criteria.equals("votedFor")) {
            List<ParticipantVote> filteredRecords = filterVotesFor(records, participantId);
            List<Participant> voters = getVoters(filteredRecords);
            addDataToTable(voters);
        } else if (criteria.equals("votesFrom")) {
            List<ParticipantVote> filteredRecords = filterVotesFrom(records, participantId);
            List<Participant> votedFor = getWhoParticipantVotedFor(filteredRecords);
            addDataToTable(votedFor);
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnFindMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFindMouseEntered
        evt.getComponent().setBackground(Color.YELLOW);
    }//GEN-LAST:event_btnFindMouseEntered

    private void btnFindMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnFindMouseExited
        evt.getComponent().setBackground(Color.CYAN);
    }//GEN-LAST:event_btnFindMouseExited
    
    private void clearTable() {
        DefaultTableModel tableModel = (DefaultTableModel) votesTable.getModel();

        int rowsQty = tableModel.getRowCount();
        for (int i = rowsQty - 1; i >= 0; i--) {
            tableModel.removeRow(i);
        }
    }
    
    private boolean checkFields() {
        if (!checkIdInput() || !checkDateInput()) {
            JOptionPane.showMessageDialog(this,
                    "Check input!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    private String createDateString() {
        Calendar calendar = DateTimeUtilities.convertStringDateToCalendar(fieldDate.getText());
        return DateTimeUtilities.getDateString(calendar);
    }
    
    private List<ParticipantVote> fetchDatabaseRecords(String dateString) {
        List<ParticipantVote> records = new ArrayList<>();
        try {
            records = daoElections.getById(dateString);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this,
                    "Error while fetching votes from the database!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return Collections.emptyList();
        }
        return records;
    }

    private List<ParticipantVote> filterVotesFor(List<ParticipantVote> records, String participantId) {
        return records.stream().filter((w) -> w.getVotedForId().equals(participantId)).toList();
    }
    
    private List<ParticipantVote> filterVotesFrom(List<ParticipantVote> records, String participantId) {
        return records.stream().filter((w) -> w.getVoterId().equals(participantId)).toList();
    }

    private List<Participant> getVoters(List<ParticipantVote> records) {
        List<Participant> voters = new ArrayList<>();
        for (ParticipantVote record : records) {
            try {
                voters.add(daoParticipants.getById(record.getVoterId()).get(0));
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(this,
                        "Error while fetching participants from the database!",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return Collections.emptyList();
            } catch (IndexOutOfBoundsException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(this,
                        "No IDs were found by given voterID!",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return Collections.emptyList();
            }
        }
        return voters;
    }
    
    private List<Participant> getWhoParticipantVotedFor(List<ParticipantVote> records) {
        List<Participant> votedFor = new ArrayList<>();
        for (ParticipantVote record : records) {
            try {
                votedFor.add(daoParticipants.getById(record.getVotedForId()).get(0));
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(this,
                        "Error while fetching participants from the database!",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return Collections.emptyList();
            } catch (IndexOutOfBoundsException ex) {
                System.out.println(ex.getMessage());
                JOptionPane.showMessageDialog(this,
                        "No IDs were found by given voterID!",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                return Collections.emptyList();
            }
        }
        return votedFor;
    }

    private void addDataToTable(List<Participant> participants) {
        DefaultTableModel tableModel = (DefaultTableModel) votesTable.getModel();
        if (!participants.isEmpty()) {
            int columnsQty = votesTable.getColumnCount();
            String[] stringData = new String[columnsQty];

            for (int i = 0; i < participants.size(); i++) {
                stringData[0] = participants.get(i).getId();
                stringData[1] = participants.get(i).firstName;
                stringData[2] = participants.get(i).lastName;
                stringData[3] = participants.get(i).patronymic;
                stringData[4] = participants.get(i).region.name();

                tableModel.addRow(stringData);
            }
        }
    }
    
    private DAOParticipants daoParticipants = new DAOParticipants();
    private DAOElections daoElections = new DAOElections();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFind;
    private javax.swing.JComboBox<String> criteriaVote;
    private javax.swing.JTextField fieldDate;
    private javax.swing.JTextField fieldId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable votesTable;
    // End of variables declaration//GEN-END:variables
}
