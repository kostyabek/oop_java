package com.mycompany.lab5;

import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import src.DAOs.DAOParticipants;
import src.Participant;
import src.Regions;

public class FormFindParticipant extends javax.swing.JPanel {

    public FormFindParticipant() {
        initComponents();
        
        connectToTheDatabase();
        
        checkFindFormInput(); //calling to add all participants to the table

        DocumentListener searchFormListener = new DocumentListener() {
            public void insertUpdate(DocumentEvent e) {
                checkFindFormInput();
            }

            public void removeUpdate(DocumentEvent e) {
                checkFindFormInput();
            }

            public void changedUpdate(DocumentEvent e) {
                //Plain text components do not fire these events
            }
        };

        fieldCriteria.getDocument().addDocumentListener(searchFormListener);

        tableFindByCriteria.setAutoCreateRowSorter(true);
    }

    private void connectToTheDatabase() {
        try {
            daoParticipants.setConnection("jdbc:sqlite:E:\\NetBeans Java Projects\\Lab5\\database\\politicalPower.db");
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this,
                    "Error while connecting to the database!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
    }

    private void checkFindFormInput() {
        DefaultTableModel tableModel = (DefaultTableModel) tableFindByCriteria.getModel();

        int numOfRows = tableModel.getRowCount();
        for (int i = numOfRows - 1; i >= 0; i--) {
            tableModel.removeRow(i);
        }

        String input = fieldCriteria.getText();
        String field = (String) criteriaFieldChooser.getSelectedItem();

        List<Participant> participants = new ArrayList<>();
        try {
            participants = daoParticipants.getByCriteria(input, field);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this,
                    "Error while processing input!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }

        addDataToTable(participants);
    }

    private void addDataToTable(List<Participant> participants) {
        DefaultTableModel tableModel = (DefaultTableModel) tableFindByCriteria.getModel();

        if (!participants.isEmpty()) {
            int columnsQty = tableFindByCriteria.getColumnCount();
            String[] stringData = new String[columnsQty - 1];

            for (int i = 0; i < participants.size(); i++) {
                stringData[0] = participants.get(i).getId();
                stringData[1] = participants.get(i).firstName;
                stringData[2] = participants.get(i).lastName;
                stringData[3] = participants.get(i).patronymic;
                stringData[4] = participants.get(i).region.name();

                tableModel.addRow(stringData);
                tableModel.setValueAt(participants.get(i).netWorth, i, columnsQty - 1);
            }
        }
    }

    public void getFormCongress(FormCongress reference) {
        formCongress = reference;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldCriteria = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableFindByCriteria = new javax.swing.JTable();
        criteriaFieldChooser = new javax.swing.JComboBox<>();
        btnAddSelectedToCongress = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setBackground(new java.awt.Color(102, 204, 255));
        setPreferredSize(new java.awt.Dimension(640, 540));

        fieldCriteria.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Enter your criteria");

        tableFindByCriteria.setBackground(java.awt.Color.cyan);
        tableFindByCriteria.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tableFindByCriteria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "firstName", "lastName", "patronymic", "region", "netWorth"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableFindByCriteria.setGridColor(new java.awt.Color(51, 153, 255));
        jScrollPane1.setViewportView(tableFindByCriteria);

        criteriaFieldChooser.setBackground(java.awt.Color.cyan);
        criteriaFieldChooser.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        criteriaFieldChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "id", "firstName", "lastName", "patronymic", "region", "netWorth" }));

        btnAddSelectedToCongress.setBackground(java.awt.Color.cyan);
        btnAddSelectedToCongress.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddSelectedToCongress.setText("Add selected to congress list");
        btnAddSelectedToCongress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddSelectedToCongressMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddSelectedToCongressMouseExited(evt);
            }
        });
        btnAddSelectedToCongress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSelectedToCongressActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(java.awt.Color.cyan);
        btnRefresh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRefreshMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnRefreshMouseExited(evt);
            }
        });
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fieldCriteria, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(criteriaFieldChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                        .addComponent(btnAddSelectedToCongress))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRefresh)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(criteriaFieldChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddSelectedToCongress))
                    .addComponent(fieldCriteria, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRefresh)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddSelectedToCongressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSelectedToCongressActionPerformed
        int[] selectedRowsIndices = tableFindByCriteria.getSelectedRows();
        int columnsQty = tableFindByCriteria.getColumnCount();

        String[] data = new String[columnsQty - 1];
        double netWorth = 0;

        List<Participant> stagedParticipants = new ArrayList<>();
        for (int rowIndex : selectedRowsIndices) {
            for (int i = 0; i < columnsQty - 1; i++) {
                data[i] = (String) tableFindByCriteria.getModel().getValueAt(rowIndex, i);
            }
            netWorth = (Double) tableFindByCriteria.getModel().getValueAt(rowIndex, columnsQty - 1);
            stagedParticipants.add(new Participant(
                    data[1],
                    data[2],
                    data[3],
                    Regions.valueOf(data[4]),
                    data[0],
                    netWorth));
        }
        formCongress.addToStaged(stagedParticipants);
    }//GEN-LAST:event_btnAddSelectedToCongressActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        List<Participant> participants = fetchAllParticipants();

        List<Participant> newParticipants = getNewRecordsFromFetchedList(participants);

        clearTable();
        addDataToTable(newParticipants);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnAddSelectedToCongressMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddSelectedToCongressMouseEntered
        evt.getComponent().setBackground(Color.YELLOW);
    }//GEN-LAST:event_btnAddSelectedToCongressMouseEntered

    private void btnAddSelectedToCongressMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddSelectedToCongressMouseExited
        evt.getComponent().setBackground(Color.CYAN);
    }//GEN-LAST:event_btnAddSelectedToCongressMouseExited

    private void btnRefreshMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseEntered
        evt.getComponent().setBackground(Color.YELLOW);
    }//GEN-LAST:event_btnRefreshMouseEntered

    private void btnRefreshMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRefreshMouseExited
        evt.getComponent().setBackground(Color.CYAN);
    }//GEN-LAST:event_btnRefreshMouseExited

    private List<Participant> fetchAllParticipants() {
        List<Participant> participants = new ArrayList<>();
        try {
            participants = daoParticipants.getAll();
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
            JOptionPane.showMessageDialog(this,
                    "Error while fetching participant list from database!",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return Collections.emptyList();
        }
        return participants;
    }

    private List<Participant> getNewRecordsFromFetchedList(List<Participant> listDatabase) {
        List<Participant> listTable = getParticipantsFromTable();
        listTable.addAll(listDatabase);

        return listTable.stream().sorted().distinct().toList();
    }

    private List<Participant> getParticipantsFromTable() {
        DefaultTableModel tableModel = (DefaultTableModel) tableFindByCriteria.getModel();
        List<Participant> participants = new ArrayList<>();

        int rowsQty = tableModel.getRowCount();
        int colsQty = tableModel.getColumnCount();

        Object[] data = new Object[colsQty];

        for (int i = 0; i < rowsQty; i++) {
            for (int j = 0; j < colsQty; j++) {
                data[j] = tableModel.getValueAt(i, j);
            }
            String id = (String) data[0];
            String firstName = (String) data[1];
            String lastName = (String) data[2];
            String patronymic = (String) data[3];
            Regions region = Regions.valueOf((String) data[4]);
            double netWorth = Double.valueOf(String.valueOf(data[5]));
            participants.add(new Participant(firstName, lastName, patronymic, region, id, netWorth));
        }

        return participants;
    }

    private void clearTable() {
        DefaultTableModel tableModel = (DefaultTableModel) tableFindByCriteria.getModel();

        int rowsQty = tableModel.getRowCount();
        for (int i = rowsQty - 1; i >= 0; i--) {
            tableModel.removeRow(i);
        }
    }

    private DAOParticipants daoParticipants = new DAOParticipants();
    private FormCongress formCongress;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSelectedToCongress;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox<String> criteriaFieldChooser;
    private javax.swing.JTextField fieldCriteria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableFindByCriteria;
    // End of variables declaration//GEN-END:variables
}
